"use strict";(self.webpackChunkguidelines=self.webpackChunkguidelines||[]).push([[8457],{3905:function(e,r,n){n.d(r,{Zo:function(){return c},kt:function(){return f}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function g(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),l=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):g(g({},r),e)),n},c=function(e){var r=l(e.components);return t.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=l(n),f=o,v=p["".concat(s,".").concat(f)]||p[f]||u[f]||a;return n?t.createElement(v,g(g({ref:r},c),{},{components:n})):t.createElement(v,g({ref:r},c))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,g=new Array(a);g[0]=p;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,g[1]=i;for(var l=2;l<a;l++)g[l]=n[l];return t.createElement.apply(null,g)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1724:function(e,r,n){n.r(r),n.d(r,{assets:function(){return c},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var t=n(7462),o=n(3366),a=(n(7294),n(3905)),g=["components"],i={slug:"logger",title:"Logger service",authors:[],tags:["logger"],sidebar_position:2},s=void 0,l={unversionedId:"logger",id:"logger",title:"Logger service",description:"A Logger service for react-native",source:"@site/services/logger.mdx",sourceDirName:".",slug:"/logger",permalink:"/test-doc/services/logger",tags:[{label:"logger",permalink:"/test-doc/services/tags/logger"}],version:"current",sidebarPosition:2,frontMatter:{slug:"logger",title:"Logger service",authors:[],tags:["logger"],sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Services",permalink:"/test-doc/services/intro"}},c={},u=[],p={toc:u};function f(e){var r=e.components,n=(0,o.Z)(e,g);return(0,a.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A Logger service for react-native"),(0,a.kt)("p",null,"Due to rules that avoid console log during development (\nPlease see:\n",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/blog/eslint-post#override-the-rules"},"Eslint rule"))," )"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="logger.service.ts"',title:'"logger.service.ts"'},"export interface LogService {\n  debug: (tag: string, ...args: any[]) => void;\n  info: (tag: string, ...args: any[]) => void;\n  warn: (tag: string, ...args: any[]) => void;\n  error: (tag: string, ...args: any[]) => void;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="logger.adapter.ts"',title:'"logger.adapter.ts"'},"export class LogAdapter implements LogService {\n  debug = (tag: string, ...args: any[]) => {\n    this.log(LogLevel.debug, tag, ...args);\n  };\n\n  info = (tag: string, ...args: any[]) => {\n    this.log(LogLevel.info, tag, ...args);\n  };\n\n  warn = (tag: string, ...args: any[]) => {\n    this.log(LogLevel.warn, tag, ...args);\n  };\n\n  error = (tag: string, ...args: any[]) => {\n    this.log(LogLevel.error, tag, ...args);\n  };\n\n  log = (level: LogLevel, tag: string, ...args: any[]) => {\n    const formttedTag = `[${tag}]`;\n\n    switch (level) {\n      case LogLevel.debug:\n        if (__DEV__) {\n          console.debug(formttedTag, ...args);\n        }\n        break;\n      case LogLevel.info:\n        console.info(formttedTag, ...args);\n        break;\n      case LogLevel.warn:\n        if (__DEV__) {\n          console.warn(formttedTag, ...args);\n        } else {\n          this.log(LogLevel.info, tag, ...args);\n        }\n        break;\n      case LogLevel.error:\n        if (__DEV__) {\n          console.error(formttedTag, ...args);\n        } else {\n          this.log(LogLevel.info, tag, ...args);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Object.defineProperty(global, 'logger', {\n  configurable: __DEV__, // needed for hot-reloading\n  get() {\n    return globalContainer.resolve<Services.LogService>(Token_LogService);\n  },\n});\n")))}f.isMDXComponent=!0}}]);